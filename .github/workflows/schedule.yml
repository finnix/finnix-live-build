# SPDX-PackageSummary: finnix-live-build
# SPDX-FileCopyrightText: Â© 2020 Ryan Finnie <ryan@finnie.org>
# SPDX-License-Identifier: MPL-2.0
---
name: "schedule"
"on":
  schedule:
    - cron: "34 5 * * 1"
  workflow_dispatch:
jobs:
  build:
    name: "Build image (${{ matrix.arch }})"
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: "amd64"
            runs-on: "ubuntu-latest"
          - arch: "arm64"
            runs-on: "ubuntu-24.04-arm"
    runs-on: "${{ matrix.runs-on }}"
    container:
      image: "docker.io/library/debian:testing"
    permissions:
      id-token: "write"
      attestations: "write"
    env:
      BUILD_WORKFLOW_TAG: "schedule"
    steps:
      - name: "Container prep"
        run: |
          apt update
          apt -y install git python3
      - uses: "actions/checkout@v4"
        with:
          submodules: true
      - name: "Dependency packages"
        run: |
          apt update
          tools/get-dependencies --only required -0 | xargs -0 apt -y install
          tools/get-dependencies --only optional | while IFS='' read -r pkg; do
            apt -y install "${pkg}" || true
          done
      - name: "Build image"
        run: |
          env BUILD_TAGS="${BUILD_WORKFLOW_TAG}" ./finnix-live-build
          rm -rf build/cache/lb/bootstrap build/cache/lb/contents.chroot build/cache/lb/indices.bootstrap
      - name: "Attest"
        uses: "actions/attest-build-provenance@v3"
        with:
          subject-path: "${{ github.workspace }}/build/lb/finnix-*.iso"
      - name: "Upload artifacts"
        uses: "actions/upload-artifact@v4"
        with:
          name: "finnix-live-build.${{ github.workflow }}.${{ github.job }}.${{ matrix.arch }}.${{ github.run_number }}.${{ github.run_id }}"
          path: |
            build/lb/finnix-*
            build/lb/chroot.files
            build/lb/chroot.packages.*
          # Faster uploads as ISOs are already heavily compressed
          compression-level: 0
  build-docker:
    name: "Build Docker image (${{ matrix.arch }})"
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: "amd64"
            runs-on: "ubuntu-latest"
          - arch: "arm64"
            runs-on: "ubuntu-24.04-arm"
    runs-on: "${{ matrix.runs-on }}"
    permissions:
      id-token: "write"
      contents: "read"
      packages: "write"
      attestations: "write"
    env:
      BUILD_WORKFLOW_TAG: "schedule"
    steps:
      - uses: "actions/checkout@v4"
        with:
          submodules: true
      - name: "Authentication"
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
      - name: "Set environment variables"
        run: |
          IMAGE_NAME="$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')"
          IMAGE_TAG="${BUILD_WORKFLOW_TAG}-${{ matrix.arch }}"
          echo "IMAGE_NAME=${IMAGE_NAME}" >>"${GITHUB_ENV}"
          echo "IMAGE_TAG=${IMAGE_TAG}" >>"${GITHUB_ENV}"
      - name: "Build image"
        run: |
          IMAGE_ID="ghcr.io/${IMAGE_NAME}:${IMAGE_TAG}"
          docker image build -t "${IMAGE_ID}" \
              --build-arg BUILD_TAGS="docker ${BUILD_WORKFLOW_TAG}" \
              --build-arg GITHUB_SERVER_URL \
              --build-arg GITHUB_REPOSITORY \
              --build-arg GITHUB_RUN_ID \
              .
          docker image history "${IMAGE_ID}"
          docker image inspect "${IMAGE_ID}"
          docker image push "${IMAGE_ID}"
          IMAGE_DIGEST="sha256:$(docker buildx imagetools inspect "${IMAGE_ID}" --raw | sha256sum | awk '{print $1}')"
          echo "IMAGE_DIGEST=${IMAGE_DIGEST}" >>"${GITHUB_ENV}"
      - name: "Attest"
        uses: "actions/attest-build-provenance@v3"
        with:
          subject-name: "ghcr.io/${{ env.IMAGE_NAME }}"
          subject-digest: "${{ env.IMAGE_DIGEST }}"
          push-to-registry: true
