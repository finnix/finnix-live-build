#!/bin/sh

# SPDX-PackageSummary: finnix-live-build
# SPDX-FileCopyrightText: Â© 2020 Ryan Finnie <ryan@finnie.org>
# SPDX-License-Identifier: MPL-2.0

set -e

PRODUCT="${PRODUCT:-Finnix}"
PRODUCT_ID="${PRODUCT_ID:-finnix}"
VERSION="${VERSION:-dev}"
CODENAME="${CODENAME:-Rhinelander}"
ARCH="${ARCH:-$(dpkg --print-architecture)}"
SOURCE_ISO="${SOURCE_ISO:-false}"
CACHE_FROZEN="${CACHE_FROZEN:-false}"
SAVE_ISO="${SAVE_ISO:-false}"
LINT="${LINT:-false}"
BUILD_TAGS="${BUILD_TAGS:-}"
BUILD_URL="${BUILD_URL:-}"
PYTHON="${PYTHON:-python3}"
UNSTABLE_PIN="${UNSTABLE_PIN:-true}"
BUILD_UUID="${BUILD_UUID:-$(uuidgen -r)}"
DOCKER_BUILD="${DOCKER_BUILD:-false}"

lock() {
    _file=$1
    exec 9>"${_file}"
    if ! flock -x -w 1 9; then
        echo "${_file} lock failed" >&2
        exit 1
    fi
}

cleanup() {
    for file in "${LINT_DIR}" "${compare_tmp_fn}" "${current_tmp_fn}" "${diff_tmp_fn}"; do
        [ -n "${file}" ] || continue
        [ -e "${file}" ] || continue
        rm -rf "${file}"
    done
}
trap cleanup EXIT

render() {
    env \
        "PRODUCT=${PRODUCT}" \
        "PRODUCT_ID=${PRODUCT_ID}" \
        "VERSION=${VERSION}" \
        "CODENAME=${CODENAME}" \
        "ARCH=${ARCH}" \
        "DATETIME=${DATETIME}" \
        "DATE=${DATE}" \
        "YEAR=${YEAR}" \
        "GIT_COMMIT=${GIT_COMMIT}" \
        "GIT_DESC=${GIT_DESC}" \
        "LIVE_BUILD_GIT_COMMIT=${LIVE_BUILD_GIT_COMMIT}" \
        "LIVE_BUILD_GIT_DESC=${LIVE_BUILD_GIT_DESC}" \
        "BUILD_TAGS=${BUILD_TAGS}" \
        "BUILD_URL=${BUILD_URL}" \
        "BUILD_UUID=${BUILD_UUID}" \
        "DOCKER_BUILD=${DOCKER_BUILD}" \
        "${BASE_DIR}/tools/jinja2-render"
}

render_files() {
    destdir="$1"
    shift
    mkdir -p "${destdir}"
    for i in "$@"; do
        basefn="$(basename "$i")"
        rm -f "${destdir}/${basefn}"
        render <"${i}" >"${destdir}/${basefn}"
    done
}

lint_shfmt() {
    fn="$1"
    shift
    bfn="$(basename "$fn")"
    shfmt -ln=posix -i 4 "${fn}" >"$LINT_DIR/${bfn}"
    diff -u "${fn}" "$LINT_DIR/${bfn}"
}

# PACKAGES USED:
# Required: cpio: live-build
# Required: debootstrap (debootstrap): live-build initial bootstrap
# Required: debian-archive-keyring: live-build initial bootstrap
# Required: python3 (${PYTHON}): Templating
# Required: python3-jinja2: Templating
# Required: librsvg2-bin (rsvg-convert): splash.png
# Required: fonts-liberation2: splash.png
# Required: pandoc: Manpage builds
# Required: uuid-runtime (uuidgen): UUID generation
# Optional: shellcheck (shellcheck): Lint, required for LINT=true
# Optional: flake8 (${PYTHON} -mflake8): Lint, required for LINT=true
# Optional: shfmt (shfmt): Lint, optional for LINT=true
# Optional: git (git): Build IDs
# Optional: file (file): Post-build file info

host_commands="debootstrap ${PYTHON} rsvg-convert pandoc cpio"
missing_commands=""
if [ "${LINT}" = "true" ]; then
    host_commands="${host_commands} shellcheck"
fi
for c in ${host_commands}; do
    command -v "${c}" >/dev/null || missing_commands="${missing_commands} ${c}"
done
if [ -n "${missing_commands}" ]; then
    echo "ERROR: Missing required commands:${missing_commands}" >&2
    exit 1
fi
has_shfmt=true
command -v shfmt >/dev/null 2>/dev/null || has_shfmt=false
if command -v dpkg >/dev/null 2>/dev/null; then
    if ! dpkg --compare-versions "$(debootstrap --version | cut -d' ' -f2)" ge 1.0.107; then
        echo "ERROR: debootstrap 1.0.107 or later is required"
        exit 1
    fi
fi
if [ "${LINT}" = "true" ]; then
    if ! "${PYTHON}" -mflake8 /dev/null; then
        echo "ERROR: flake8 is required for LINT=true"
        exit 1
    fi
fi

DATETIME="$(date -u +"%F %T")"
DATE="$(date -u +"%F")"
YEAR="$(date -u +"%Y")"
SQUASHFS_COMP="xz"
if [ "${ARCH}" = "amd64" ]; then
    BINARY_IMAGES="iso-hybrid"
    BOOTLOADERS="grub-efi,syslinux"
    ISO_FILENAME="${PRODUCT_ID}-${ARCH}.hybrid.iso"
    MEMTEST="memtest86+"
    SQUASHFS_COMP="xz -Xbcj x86"
elif [ "${ARCH}" = "arm64" ]; then
    BINARY_IMAGES="iso-hybrid"
    BOOTLOADERS="grub-efi"
    ISO_FILENAME="${PRODUCT_ID}-${ARCH}.hybrid.iso"
    MEMTEST=""
else
    BINARY_IMAGES="iso"
    BOOTLOADERS=""
    ISO_FILENAME="${PRODUCT_ID}-${ARCH}.iso"
    MEMTEST=""
fi

if [ -z "${APT_HTTP_PROXY}" ]; then
    eval "$(apt-config shell APT_HTTP_PROXY Acquire::http::Proxy 2>/dev/null || true)"
fi

if [ "${LINT}" = "true" ]; then
    LINT_DIR="$(mktemp -d)"
    BUILD_DIR="${BUILD_DIR:-${LINT_DIR}}"
fi

BASE_DIR="${BASE_DIR:-$(dirname "$(readlink -f "$0")")}"
FILES_DIR="${FILES_DIR:-${BASE_DIR}/files}"
BUILD_DIR="${BUILD_DIR:-${BASE_DIR}/build}"
CACHE_DIR="${CACHE_DIR:-${BUILD_DIR}/cache}"
RENDER_DIR="${RENDER_DIR:-${BUILD_DIR}/render}"
LOCK_DIR="${LOCK_DIR:-${BUILD_DIR}/lock}"
LOCK_NAME="${LOCK_NAME:-$(basename "$(readlink -f "$0")")}"
BUILD_INFO_DIR="${BUILD_INFO_DIR:-${BUILD_DIR}/info}"
LB_DIR="${LB_DIR:-${BUILD_DIR}/lb}"
LB_CACHE_DIR="${LB_CACHE_DIR:-${CACHE_DIR}/lb}"
LIVE_BUILD="${LIVE_BUILD:-${BASE_DIR}/live-build}"

is_dirty=false
GIT_COMMIT="$(git -C "${BASE_DIR}" log --format="%H" -n 1 2>/dev/null || true)"
GIT_DESC="$(git -C "${BASE_DIR}" describe --always --dirty 2>/dev/null || true)"
if [ -n "${GIT_DESC}" ]; then
    if ! git -C "${BASE_DIR}" diff --quiet 2>/dev/null; then
        is_dirty=true
        BUILD_TAGS="${BUILD_TAGS} dirty"
    fi
fi
LIVE_BUILD_GIT_COMMIT=""
LIVE_BUILD_GIT_DESC=""

if [ "${LIVE_BUILD}" = "-" ]; then
    LIVE_BUILD=""
fi
export LIVE_BUILD
if [ -n "${LIVE_BUILD}" ]; then
    if [ ! -e "${LIVE_BUILD}/frontend/lb" ]; then
        echo "ERROR: ${LIVE_BUILD}/frontend/lb not found" >&2
        if [ "${LIVE_BUILD}" = "${BASE_DIR}/live-build" ]; then
            echo "You probably want: git -C \"${BASE_DIR}\" submodule update --init --recursive" >&2
        fi
        exit 1
    fi
    export PATH="${LIVE_BUILD}/frontend:${PATH}"
    LIVE_BUILD_GIT_COMMIT="$(git -C "${LIVE_BUILD}" log --format="%H" -n 1 2>/dev/null || true)"
    LIVE_BUILD_GIT_DESC="$(git -C "${LIVE_BUILD}" describe --always --dirty 2>/dev/null || true)"
fi

BUILD_TAGS="${BUILD_TAGS} ${ARCH}"
if [ -t 0 ]; then
    BUILD_TAGS="${BUILD_TAGS} terminal"
fi
if [ -n "${SCHROOT_SESSION_ID}" ]; then
    BUILD_TAGS="${BUILD_TAGS} schroot"
fi
if [ -e "/.dockerenv" ]; then
    BUILD_TAGS="${BUILD_TAGS} docker"
fi
# (SC2154) Lowercase variable is conditionally set by systemd-nspawn,
# nothing we can do
# shellcheck disable=SC2154
if [ "${container}" = "systemd-nspawn" ]; then
    BUILD_TAGS="${BUILD_TAGS} systemd-nspawn"
fi
# shellcheck disable=SC2154
if [ "${container}" = "podman" ]; then
    BUILD_TAGS="${BUILD_TAGS} podman"
fi

if [ -e /etc/os-release ]; then
    for i in BUILD_OS_ID BUILD_OS_VERSION_CODENAME BUILD_OS_VERSION_ID; do
        read -r "${i?}" || true
    done <<EOM
$(
        # (SC1091) Do not attempt to read os-release when linting
        # shellcheck disable=SC1091
        . /etc/os-release
        echo "$ID"
        echo "$VERSION_CODENAME"
        echo "$VERSION_ID"
    )
EOM
    if [ -n "${BUILD_OS_VERSION_CODENAME}" ]; then
        build_os_ver="${BUILD_OS_VERSION_CODENAME}"
    else
        build_os_ver="${BUILD_OS_VERSION_ID}"
    fi
    BUILD_TAGS="${BUILD_TAGS} ${BUILD_OS_ID} ${build_os_ver}"
fi

if [ -e /sys/class/dmi/id/chassis_asset_tag ]; then
    if [ "$(cat /sys/class/dmi/id/chassis_asset_tag)" = "OracleCloud.com" ]; then
        BUILD_TAGS="${BUILD_TAGS} oci"
    elif [ "$(cat /sys/class/dmi/id/chassis_asset_tag)" = "Amazon EC2" ]; then
        BUILD_TAGS="${BUILD_TAGS} aws"
    fi
elif [ -e /sys/class/dmi/id/board_name ]; then
    if [ "$(cat /sys/class/dmi/id/board_name)" = "Google Compute Engine" ]; then
        BUILD_TAGS="${BUILD_TAGS} gce"
    fi
elif grep -q DataSourceAzure /run/cloud-init/status.json 2>/dev/null; then
    # This relies on cloud-init, but there doesn't appear to be any
    # hardware/etc way to determine if running on Azure.
    BUILD_TAGS="${BUILD_TAGS} azure"
fi
if [ -n "${GITHUB_RUN_ID}" ]; then
    BUILD_TAGS="${BUILD_TAGS} gha"
fi

BUILD_TAGS="$(for i in ${BUILD_TAGS}; do echo "${i}"; done | sort | uniq | xargs)"

if [ -z "${BUILD_URL}" ] && [ -n "${GITHUB_RUN_ID}" ]; then
    BUILD_URL="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
fi

if [ "${LINT}" = "true" ]; then
    failed_lint=false
    shellcheck "${BASE_DIR}/finnix-live-build" || failed_lint=true
    if [ "${has_shfmt}" = "true" ]; then lint_shfmt "${BASE_DIR}/finnix-live-build" || failed_lint=true; fi
    for script_dir in "${BASE_DIR}/tools" "${BASE_DIR}/.rrpcid/jobs"/* "${BASE_DIR}/hooks"; do
        # Interpet output as words
        # shellcheck disable=SC2013
        for fn in $(grep -l -E '^#!/(usr/)?bin/(env )?(ba)?sh' "${script_dir}"/*); do
            [ -e "${fn}" ] || continue
            shellcheck "${fn}" || failed_lint=true
            if [ "${has_shfmt}" = "true" ]; then lint_shfmt "${fn}" || failed_lint=true; fi
        done
        grep -l -E '^#!/(usr/)?bin/(env )?python3' "${script_dir}"/* | xargs -r "${PYTHON}" -mflake8 --config=/dev/null --max-line-length=120 || failed_lint=true
    done

    mkdir -p "${LINT_DIR}/md/in" "${LINT_DIR}/md/out"
    for fn in "${BASE_DIR}"/*.md "${BASE_DIR}/.rrpcid"/*.md "${BASE_DIR}/files/manpages"/*.md; do
        md_full_path="${fn#"${BASE_DIR}/"}"
        md_dir="$(dirname "${md_full_path}")"
        mkdir -p "${LINT_DIR}/md/in/${md_dir}" "${LINT_DIR}/md/out/${md_dir}"
        render <"${fn}" >"${LINT_DIR}/md/in/${md_full_path}"
        pandoc -s -t gfm+smart --columns=80 -i "${LINT_DIR}/md/in/${md_full_path}" -o "${LINT_DIR}/md/out/${md_full_path}"
    done
    diff -ru "${LINT_DIR}/md/in" "${LINT_DIR}/md/out" || failed_lint=true

    if [ "${failed_lint}" = "true" ]; then
        echo
        echo "Failed lint checks"
        exit 1
    fi
fi

mkdir -p "${LOCK_DIR}"
lock "${LOCK_DIR}/${LOCK_NAME}.lock"

rm -rf "${RENDER_DIR}"
render_files "${RENDER_DIR}/hooks" "${BASE_DIR}/hooks"/*.hook.*
render_files "${RENDER_DIR}/hook-files" "${FILES_DIR}/hooks"/*
render_files "${RENDER_DIR}/docker-files" "${FILES_DIR}/docker"/*
render_files "${RENDER_DIR}/package-lists" "${BASE_DIR}/lists"/*.list.chroot
for i in "${FILES_DIR}/manpages"/*.md; do
    basefn="$(basename "$i" .md)"
    (
        render <"${FILES_DIR}/manpages/${basefn}.metadata.yaml"
        echo "---"
        render <"${i}"
    ) | pandoc -s -f markdown_github-smart+yaml_metadata_block -t man -o "${RENDER_DIR}/hook-files/${basefn}.1"
done
# pandoc 2.13 supports gfm+yaml_metadata_block input, but generates identical output to markdown_github-smart+yaml_metadata_block.
# It should be safe to migrate this eventually when markdown_github-smart is hard deprecated,
# but until then we can keep it for maximum build compatibility.

mkdir -p "${RENDER_DIR}/archives"
if [ "${UNSTABLE_PIN}" = "true" ]; then
    cat >"${RENDER_DIR}/archives/unstable.list.chroot" <<"EOM"
deb http://deb.debian.org/debian/ unstable main contrib non-free non-free-firmware
deb-src http://deb.debian.org/debian/ unstable main contrib non-free non-free-firmware
EOM
    cp "${RENDER_DIR}/archives/unstable.list.chroot" "${RENDER_DIR}/archives/unstable.list.binary"
    cat >"${RENDER_DIR}/archives/unstable.pref.chroot" <<"EOM"
Package: *
Pin: release a=unstable
Pin-Priority: 400
EOM
    cp "${RENDER_DIR}/archives/unstable.pref.chroot" "${RENDER_DIR}/archives/unstable.pref.binary"
fi
cat >"${RENDER_DIR}/archives/80${PRODUCT_ID}.conf.chroot" <<"EOM"
Acquire::PDiffs "false";
Acquire::Languages { "none"; };
EOM
cp "${RENDER_DIR}/archives/80${PRODUCT_ID}.conf.chroot" "${RENDER_DIR}/archives/80${PRODUCT_ID}.conf.binary"
if [ "${SOURCE_ISO}" = "false" ]; then
    for fn in "${RENDER_DIR}/archives"/*.list.*; do
        [ -e "${fn}" ] || continue
        sed -i "s/^deb-src/#deb-src/g" "${fn}"
    done
fi

if [ "${DOCKER_BUILD}" = "true" ]; then
    DOCKER_DIR="${BUILD_DIR}/docker"
    rm -rf "${DOCKER_DIR}"
    mkdir -p "${DOCKER_DIR}"
    cp -a "${RENDER_DIR}/docker-files/." "${DOCKER_DIR}/"
    render_files "${DOCKER_DIR}/hooks" "${LIVE_BUILD}/share/hooks/normal"/*.hook.chroot
    cp -a "${RENDER_DIR}/hooks"/*.hook.chroot "${DOCKER_DIR}/hooks/"
    mkdir -p "${DOCKER_DIR}/hook-files"
    cp -a "${RENDER_DIR}/hook-files/." "${DOCKER_DIR}/hook-files/"
    chmod 0755 "${DOCKER_DIR}/container-build" "${DOCKER_DIR}/hooks"/*.hook.chroot
    mkdir -p "${DOCKER_DIR}/package-lists"
    cp -a "${RENDER_DIR}/package-lists"/*.chroot "${DOCKER_DIR}/package-lists/"
    mkdir -p "${DOCKER_DIR}/archives"
    cp -a "${RENDER_DIR}/archives"/*.chroot "${DOCKER_DIR}/archives/"

    exit 0
fi

cd /
rm -rf "${LB_DIR}"
mkdir -p "${LB_DIR}"
cd "${LB_DIR}"

do_lb_config() {
    # Note that --source true also requires --apt-source-archives true

    lb config noauto \
        --apt-http-proxy "${APT_HTTP_PROXY}" \
        --apt-indices false \
        --apt-recommends false \
        --apt-source-archives "${SOURCE_ISO}" \
        --architectures "${ARCH}" \
        --archive-areas "main contrib non-free non-free-firmware" \
        --binary-images "${BINARY_IMAGES}" \
        --bootappend-live "quiet" \
        --bootloaders "${BOOTLOADERS}" \
        --cache-indices true \
        --chroot-squashfs-compression-type "${SQUASHFS_COMP}" \
        --debootstrap-options "--no-merged-usr" \
        --distribution testing \
        --firmware-chroot false \
        --hdd-label "$(echo "${PRODUCT_ID}" | tr '[:lower:]' '[:upper:]')" \
        --image-name "${PRODUCT_ID}" \
        --iso-application "${PRODUCT}" \
        --iso-preparer "${PRODUCT}" \
        --iso-publisher "${PRODUCT}" \
        --iso-volume "${PRODUCT} ${VERSION}" \
        --memtest "${MEMTEST}" \
        --source "${SOURCE_ISO}" \
        --source-images iso \
        --zsync false \
        --mode debian \
        "$@"
}

do_lb_config

mkdir -p "${LB_CACHE_DIR}"
if [ "${CACHE_FROZEN}" = "false" ]; then
    if [ -e "${LB_CACHE_DIR}/bootstrap/etc/hostname" ]; then
        if [ -n "$(find "${LB_CACHE_DIR}/bootstrap/etc/hostname" -mmin +1080)" ]; then
            rm -rf "${LB_CACHE_DIR}/bootstrap"
        fi
    else
        rm -rf "${LB_CACHE_DIR}/bootstrap"
    fi
    if [ -e "${LB_CACHE_DIR}/indices.bootstrap/pkgcache.bin" ]; then
        if [ -n "$(find "${LB_CACHE_DIR}/indices.bootstrap/pkgcache.bin" -mmin +1080)" ]; then
            rm -rf "${LB_CACHE_DIR}/indices.bootstrap" "${LB_CACHE_DIR}/contents.chroot"
        fi
    else
        rm -rf "${LB_CACHE_DIR}/indices.bootstrap" "${LB_CACHE_DIR}/contents.chroot"
    fi
    find "${LB_CACHE_DIR}"/packages.* -name '*.deb' -mtime +30 -delete 2>/dev/null || true
fi
if [ "${container}" = "systemd-nspawn" ] && [ -e "${LB_CACHE_DIR}/bootstrap/dev/console" ]; then
    # Restoring parts of bootstrap/dev/ created outside systemd-nspawn
    # will fail inside systemd-nspawn
    rm -rf "${LB_CACHE_DIR}/bootstrap"
fi
rm -rf "${LB_DIR}/cache"
ln -sf "${LB_CACHE_DIR}" "${LB_DIR}/cache"

mkdir -p "${LB_DIR}/config/hooks/normal"
cp -a "${RENDER_DIR}/hooks/." "${LB_DIR}/config/hooks/normal/"
mkdir -p "${LB_DIR}/config/includes.chroot_after_packages/hook-files"
cp -a "${RENDER_DIR}/hook-files/." "${LB_DIR}/config/includes.chroot_after_packages/hook-files/"
mkdir -p "${LB_DIR}/config/package-lists"
cp -a "${RENDER_DIR}/package-lists/." "${LB_DIR}/config/package-lists/"

if [ "${is_dirty}" = "true" ]; then
    mkdir -p "${LB_DIR}/config/includes.binary/.disk"
    git -C "${BASE_DIR}" status >"${LB_DIR}/config/includes.binary/.disk/build-dirty.patch"
    git -C "${BASE_DIR}" diff >>"${LB_DIR}/config/includes.binary/.disk/build-dirty.patch"
fi

render_files "${LB_DIR}/config/bootloaders/syslinux_common" "${FILES_DIR}/syslinux"/*.cfg
render <"${FILES_DIR}/syslinux/splash.svg" | rsvg-convert --format png --width 640 --height 480 >"${LB_DIR}/config/bootloaders/syslinux_common/splash.png"
render_files "${LB_DIR}/config/bootloaders/grub-pc" "${FILES_DIR}/grub"/*.cfg
render <"${FILES_DIR}/grub/splash.svg" | rsvg-convert --format png --width 1920 --height 1080 >"${LB_DIR}/config/bootloaders/grub-pc/splash.png"
render_files "${LB_DIR}/config/bootloaders/grub-pc/live-theme" "${FILES_DIR}/grub/theme.txt"

if [ -z "${SQUASHFS_SORT_FILE}" ]; then
    for f in \
        "${FILES_DIR}/squashfs.${VERSION}.${ARCH}.sort" \
        "${FILES_DIR}/squashfs.${ARCH}.sort" \
        "${FILES_DIR}/squashfs.sort"; do
        if [ -e "${f}" ]; then
            SQUASHFS_SORT_FILE="${f}"
            break
        fi
    done
fi
if [ -n "${SQUASHFS_SORT_FILE}" ]; then
    mkdir -p "${LB_DIR}/config/rootfs"
    cp "${SQUASHFS_SORT_FILE}" "${LB_DIR}/config/rootfs/squashfs.sort"
fi

# The in-squashfs initrds are unused; exclude them
mkdir -p "${LB_DIR}/config/rootfs"
cat <<"EOM" >"${LB_DIR}/config/rootfs/excludes"
boot/initrd.img*
initrd.img*
EOM

mkdir -p "${LB_DIR}/config/includes.chroot_after_packages/etc"
echo "${PRODUCT_ID}" >"${LB_DIR}/config/includes.chroot_after_packages/etc/hostname"
cat <<EOM >"${LB_DIR}/config/includes.chroot_after_packages/etc/hosts"
127.0.0.1	localhost
127.0.1.1	${PRODUCT_ID}

::1	ip6-localhost ip6-loopback
fe00::0	ip6-localnet
ff00::0	ip6-mcastprefix
ff00::1	ip6-allnodes
ff00::2	ip6-allrouters
EOM

cat <<"EOM" >config/preseed/firmware-nonfree.cfg.chroot
firmware-ipw2x00 firmware-ipw2x00/license/accepted boolean true
EOM

mkdir -p "${LB_DIR}/config/archives"
cp -a "${RENDER_DIR}/archives/." "${LB_DIR}/config/archives/"

if [ "${LINT}" = "true" ]; then
    # Interpet output as words
    # shellcheck disable=SC2013
    for fn in $(
        grep -l -E '^#!/(usr/)?bin/(env )?(ba)?sh' \
            "${LB_DIR}/config/hooks/normal"/*-finnix-*.hook.chroot \
            "${LB_DIR}/config/includes.chroot_after_packages/hook-files"/*
    ); do
        [ -e "${fn}" ] || continue
        shellcheck "${fn}"
        [ "${has_shfmt}" = "true" ] && lint_shfmt "${fn}"
    done
    grep -l -E '^#!/(usr/)?bin/(env )?python3' "${LB_DIR}/config/hooks/normal"/*-finnix-*.hook.chroot | xargs -r "${PYTHON}" -mflake8 --config=/dev/null --max-line-length=120
    grep -l -E '^#!/(usr/)?bin/(env )?python3' "${LB_DIR}/config/includes.chroot_after_packages/hook-files"/* | xargs -r "${PYTHON}" -mflake8 --config=/dev/null --max-line-length=120
fi

if [ "${LINT}" = "true" ]; then
    rm -rf "${LINT_DIR}"
    echo "Lint completed without error"
    exit 0
fi

lb build

build_id="$(echo "${DATETIME}" | sed -e 's/ /_/g')"
if [ -n "${GIT_DESC}" ]; then
    build_id="${build_id}_${GIT_DESC}"
fi
build_size="$(stat -c "%s" "${LB_DIR}/${ISO_FILENAME}")"
mkdir -p "${BUILD_INFO_DIR}/${build_id}"
cp -a "${LB_DIR}"/*.contents "${BUILD_INFO_DIR}/${build_id}/"
cp -a "${LB_DIR}"/*.files "${BUILD_INFO_DIR}/${build_id}/"
cp -a "${LB_DIR}"/*.packages "${BUILD_INFO_DIR}/${build_id}/"
cp -a "${LB_DIR}"/*.packages.* "${BUILD_INFO_DIR}/${build_id}/"
if [ "${is_dirty}" = "true" ]; then
    cp "${LB_DIR}/config/includes.binary/.disk/build-dirty.patch" "${BUILD_INFO_DIR}/${build_id}/dirty.patch"
fi
echo "${build_size}" >"${BUILD_INFO_DIR}/${build_id}/${ISO_FILENAME}.size"
if [ "${SAVE_ISO}" = "true" ]; then
    cp -a "${LB_DIR}/${ISO_FILENAME}" "${BUILD_INFO_DIR}/${build_id}/${ISO_FILENAME}"
    if [ "${SOURCE_ISO}" = "true" ]; then
        cp -a "${LB_DIR}/${PRODUCT_ID}-source.iso" "${BUILD_INFO_DIR}/${build_id}/${PRODUCT_ID}-source.iso"
    fi
fi

ls -lsa "${LB_DIR}/${ISO_FILENAME}"
sha256="$(sha256sum "${LB_DIR}/${ISO_FILENAME}" | cut -f1 -d" ")"
echo "SHA256: ${sha256}"
fileoutput=""
if command -v file >/dev/null; then
    fileoutput="$(file -b "${LB_DIR}/${ISO_FILENAME}")"
    echo "${fileoutput}"
fi
if [ "${SOURCE_ISO}" = "true" ]; then
    source_iso_filename="${PRODUCT_ID}-source.iso"
    ls -lsa "${LB_DIR}/${source_iso_filename}"
    source_sha256="$(sha256sum "${LB_DIR}/${source_iso_filename}" | cut -f1 -d" ")"
    echo "Source SHA256: ${sha256}"
    source_fileoutput=""
    if command -v file >/dev/null; then
        source_fileoutput="$(file -b "${LB_DIR}/${source_iso_filename}")"
        echo "${source_fileoutput}"
    fi
    source_build_size="$(stat -c "%s" "${LB_DIR}/${source_iso_filename}")"
fi
echo "Build: ${DATETIME} ${GIT_DESC} ${BUILD_TAGS}"
echo

if [ -n "${GITHUB_STEP_SUMMARY}" ]; then
    if [ "${SOURCE_ISO}" = "true" ]; then
        {
            echo "### Source build information"
            echo ""
            echo "- Build: ${DATETIME} ${GIT_DESC} ${BUILD_TAGS}"
            echo "- Size: $((source_build_size / 1048576)) MiB (${source_build_size})"
            echo "- SHA256: \`${source_sha256}\`"
            if [ -n "${source_fileoutput}" ]; then
                echo "- File: ${source_fileoutput}"
            fi
        } >>"${GITHUB_STEP_SUMMARY}"
    else
        {
            echo "### Build information"
            echo ""
            echo "- Build: ${DATETIME} ${GIT_DESC} ${BUILD_TAGS}"
            echo "- Size: $((build_size / 1048576)) MiB (${build_size})"
            echo "- SHA256: \`${sha256}\`"
            if [ -n "${fileoutput}" ]; then
                echo "- File: ${fileoutput}"
            fi
            echo "- Packages: $(wc -l "${LB_DIR}/chroot.packages.live" | cut -f1 -d" ")"
        } >>"${GITHUB_STEP_SUMMARY}"
    fi
fi

current_tmp_fn="$(mktemp)"
compare_tmp_fn="$(mktemp)"
diff_tmp_fn="$(mktemp)"
cut -f1 <"${BUILD_INFO_DIR}/${build_id}/chroot.packages.live" | sort >"${current_tmp_fn}"

for compare_link in "${BUILD_INFO_DIR}"/*; do
    [ -h "$compare_link" ] || continue
    compare_name="$(basename "${compare_link}")"
    compare_build_id="$(basename "$(readlink -f "${compare_link}")")"

    compare_build_size="$(cat "${compare_link}/${ISO_FILENAME}.size")"
    build_size_delta=$((build_size - compare_build_size))
    if [ "${build_size_delta}" -ge 1048576 ] || [ "${build_size_delta}" -le -1048576 ]; then
        echo "NOTE: Build size changed from build \"${compare_name}\" (${compare_build_id}):"
        echo "    - $((compare_build_size / 1048576)) MiB - ${compare_build_id}"
        echo "    + $((build_size / 1048576)) MiB - ${build_id}"
        echo
    fi

    cut -f1 <"${compare_link}/chroot.packages.live" | sort >"${compare_tmp_fn}"
    (diff "${compare_tmp_fn}" "${current_tmp_fn}" | grep -e '^[<>]') >"${diff_tmp_fn}" || true
    if [ -s "${diff_tmp_fn}" ]; then
        echo "NOTE: Packages names changed from build \"${compare_name}\" (${compare_build_id}):"
        cat "${diff_tmp_fn}"
        echo
    fi
done

rm -f "${compare_tmp_fn}" "${current_tmp_fn}" "${diff_tmp_fn}"
rm -f "${BUILD_INFO_DIR}/previous"
ln -s "${build_id}" "${BUILD_INFO_DIR}/previous"
